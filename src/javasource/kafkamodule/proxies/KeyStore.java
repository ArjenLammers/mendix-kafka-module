// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafkamodule.proxies;

public class KeyStore extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "KafkaModule.KeyStore";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Password("Password"),
		PrivateKeyPassword("PrivateKeyPassword"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		Server_TrustStore("KafkaModule.Server_TrustStore"),
		Server_KeyStore("KafkaModule.Server_KeyStore");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public KeyStore(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "KafkaModule.KeyStore"));
	}

	protected KeyStore(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject keyStoreMendixObject)
	{
		super(context, keyStoreMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("KafkaModule.KeyStore", keyStoreMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a KafkaModule.KeyStore");
	}

	/**
	 * @deprecated Use 'KeyStore.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static kafkamodule.proxies.KeyStore initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafkamodule.proxies.KeyStore.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static kafkamodule.proxies.KeyStore initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafkamodule.proxies.KeyStore(context, mendixObject);
	}

	public static kafkamodule.proxies.KeyStore load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafkamodule.proxies.KeyStore.initialize(context, mendixObject);
	}

	public static java.util.List<kafkamodule.proxies.KeyStore> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<kafkamodule.proxies.KeyStore> result = new java.util.ArrayList<kafkamodule.proxies.KeyStore>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//KafkaModule.KeyStore" + xpathConstraint))
			result.add(kafkamodule.proxies.KeyStore.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Password
	 */
	public final java.lang.String getPassword()
	{
		return getPassword(getContext());
	}

	/**
	 * @param context
	 * @return value of Password
	 */
	public final java.lang.String getPassword(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Password.toString());
	}

	/**
	 * Set value of Password
	 * @param password
	 */
	public final void setPassword(java.lang.String password)
	{
		setPassword(getContext(), password);
	}

	/**
	 * Set value of Password
	 * @param context
	 * @param password
	 */
	public final void setPassword(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String password)
	{
		getMendixObject().setValue(context, MemberNames.Password.toString(), password);
	}

	/**
	 * @return value of PrivateKeyPassword
	 */
	public final java.lang.String getPrivateKeyPassword()
	{
		return getPrivateKeyPassword(getContext());
	}

	/**
	 * @param context
	 * @return value of PrivateKeyPassword
	 */
	public final java.lang.String getPrivateKeyPassword(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.PrivateKeyPassword.toString());
	}

	/**
	 * Set value of PrivateKeyPassword
	 * @param privatekeypassword
	 */
	public final void setPrivateKeyPassword(java.lang.String privatekeypassword)
	{
		setPrivateKeyPassword(getContext(), privatekeypassword);
	}

	/**
	 * Set value of PrivateKeyPassword
	 * @param context
	 * @param privatekeypassword
	 */
	public final void setPrivateKeyPassword(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String privatekeypassword)
	{
		getMendixObject().setValue(context, MemberNames.PrivateKeyPassword.toString(), privatekeypassword);
	}

	/**
	 * @return value of Server_TrustStore
	 */
	public final kafkamodule.proxies.Server getServer_TrustStore() throws com.mendix.core.CoreException
	{
		return getServer_TrustStore(getContext());
	}

	/**
	 * @param context
	 * @return value of Server_TrustStore
	 */
	public final kafkamodule.proxies.Server getServer_TrustStore(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.Server result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Server_TrustStore.toString());
		if (identifier != null)
			result = kafkamodule.proxies.Server.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Server_TrustStore
	 * @param server_truststore
	 */
	public final void setServer_TrustStore(kafkamodule.proxies.Server server_truststore)
	{
		setServer_TrustStore(getContext(), server_truststore);
	}

	/**
	 * Set value of Server_TrustStore
	 * @param context
	 * @param server_truststore
	 */
	public final void setServer_TrustStore(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.Server server_truststore)
	{
		if (server_truststore == null)
			getMendixObject().setValue(context, MemberNames.Server_TrustStore.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Server_TrustStore.toString(), server_truststore.getMendixObject().getId());
	}

	/**
	 * @return value of Server_KeyStore
	 */
	public final kafkamodule.proxies.Server getServer_KeyStore() throws com.mendix.core.CoreException
	{
		return getServer_KeyStore(getContext());
	}

	/**
	 * @param context
	 * @return value of Server_KeyStore
	 */
	public final kafkamodule.proxies.Server getServer_KeyStore(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.Server result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Server_KeyStore.toString());
		if (identifier != null)
			result = kafkamodule.proxies.Server.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Server_KeyStore
	 * @param server_keystore
	 */
	public final void setServer_KeyStore(kafkamodule.proxies.Server server_keystore)
	{
		setServer_KeyStore(getContext(), server_keystore);
	}

	/**
	 * Set value of Server_KeyStore
	 * @param context
	 * @param server_keystore
	 */
	public final void setServer_KeyStore(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.Server server_keystore)
	{
		if (server_keystore == null)
			getMendixObject().setValue(context, MemberNames.Server_KeyStore.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Server_KeyStore.toString(), server_keystore.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafkamodule.proxies.KeyStore that = (kafkamodule.proxies.KeyStore) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "KafkaModule.KeyStore";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
