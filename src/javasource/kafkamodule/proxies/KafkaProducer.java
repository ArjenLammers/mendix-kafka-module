// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafkamodule.proxies;

public class KafkaProducer
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject kafkaProducerMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "KafkaModule.KafkaProducer";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Name("Name"),
		KafkaProducer_ProducerConfig("KafkaModule.KafkaProducer_ProducerConfig"),
		KafkaProducer_KafkaServer("KafkaModule.KafkaProducer_KafkaServer");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public KafkaProducer(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "KafkaModule.KafkaProducer"));
	}

	protected KafkaProducer(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject kafkaProducerMendixObject)
	{
		if (kafkaProducerMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("KafkaModule.KafkaProducer", kafkaProducerMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a KafkaModule.KafkaProducer");

		this.kafkaProducerMendixObject = kafkaProducerMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'KafkaProducer.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static kafkamodule.proxies.KafkaProducer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafkamodule.proxies.KafkaProducer.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static kafkamodule.proxies.KafkaProducer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafkamodule.proxies.KafkaProducer(context, mendixObject);
	}

	public static kafkamodule.proxies.KafkaProducer load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafkamodule.proxies.KafkaProducer.initialize(context, mendixObject);
	}

	public static java.util.List<kafkamodule.proxies.KafkaProducer> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<kafkamodule.proxies.KafkaProducer> result = new java.util.ArrayList<kafkamodule.proxies.KafkaProducer>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//KafkaModule.KafkaProducer" + xpathConstraint))
			result.add(kafkamodule.proxies.KafkaProducer.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of KafkaProducer_ProducerConfig
	 */
	public final kafkamodule.proxies.ProducerConfig getKafkaProducer_ProducerConfig() throws com.mendix.core.CoreException
	{
		return getKafkaProducer_ProducerConfig(getContext());
	}

	/**
	 * @param context
	 * @return value of KafkaProducer_ProducerConfig
	 */
	public final kafkamodule.proxies.ProducerConfig getKafkaProducer_ProducerConfig(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.ProducerConfig result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.KafkaProducer_ProducerConfig.toString());
		if (identifier != null)
			result = kafkamodule.proxies.ProducerConfig.load(context, identifier);
		return result;
	}

	/**
	 * Set value of KafkaProducer_ProducerConfig
	 * @param kafkaproducer_producerconfig
	 */
	public final void setKafkaProducer_ProducerConfig(kafkamodule.proxies.ProducerConfig kafkaproducer_producerconfig)
	{
		setKafkaProducer_ProducerConfig(getContext(), kafkaproducer_producerconfig);
	}

	/**
	 * Set value of KafkaProducer_ProducerConfig
	 * @param context
	 * @param kafkaproducer_producerconfig
	 */
	public final void setKafkaProducer_ProducerConfig(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.ProducerConfig kafkaproducer_producerconfig)
	{
		if (kafkaproducer_producerconfig == null)
			getMendixObject().setValue(context, MemberNames.KafkaProducer_ProducerConfig.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.KafkaProducer_ProducerConfig.toString(), kafkaproducer_producerconfig.getMendixObject().getId());
	}

	/**
	 * @return value of KafkaProducer_KafkaServer
	 */
	public final kafkamodule.proxies.KafkaServer getKafkaProducer_KafkaServer() throws com.mendix.core.CoreException
	{
		return getKafkaProducer_KafkaServer(getContext());
	}

	/**
	 * @param context
	 * @return value of KafkaProducer_KafkaServer
	 */
	public final kafkamodule.proxies.KafkaServer getKafkaProducer_KafkaServer(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.KafkaServer result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.KafkaProducer_KafkaServer.toString());
		if (identifier != null)
			result = kafkamodule.proxies.KafkaServer.load(context, identifier);
		return result;
	}

	/**
	 * Set value of KafkaProducer_KafkaServer
	 * @param kafkaproducer_kafkaserver
	 */
	public final void setKafkaProducer_KafkaServer(kafkamodule.proxies.KafkaServer kafkaproducer_kafkaserver)
	{
		setKafkaProducer_KafkaServer(getContext(), kafkaproducer_kafkaserver);
	}

	/**
	 * Set value of KafkaProducer_KafkaServer
	 * @param context
	 * @param kafkaproducer_kafkaserver
	 */
	public final void setKafkaProducer_KafkaServer(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.KafkaServer kafkaproducer_kafkaserver)
	{
		if (kafkaproducer_kafkaserver == null)
			getMendixObject().setValue(context, MemberNames.KafkaProducer_KafkaServer.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.KafkaProducer_KafkaServer.toString(), kafkaproducer_kafkaserver.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return kafkaProducerMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafkamodule.proxies.KafkaProducer that = (kafkamodule.proxies.KafkaProducer) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "KafkaModule.KafkaProducer";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
