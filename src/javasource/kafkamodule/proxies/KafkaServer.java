// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafkamodule.proxies;

public class KafkaServer
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject kafkaServerMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "KafkaModule.KafkaServer";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Name("Name"),
		KafkaServer_KafkaConfig("KafkaModule.KafkaServer_KafkaConfig"),
		TrustStore_KeyStore("KafkaModule.TrustStore_KeyStore"),
		KeyStore_KeyStore("KafkaModule.KeyStore_KeyStore");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public KafkaServer(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "KafkaModule.KafkaServer"));
	}

	protected KafkaServer(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject kafkaServerMendixObject)
	{
		if (kafkaServerMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("KafkaModule.KafkaServer", kafkaServerMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a KafkaModule.KafkaServer");

		this.kafkaServerMendixObject = kafkaServerMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'KafkaServer.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static kafkamodule.proxies.KafkaServer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafkamodule.proxies.KafkaServer.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static kafkamodule.proxies.KafkaServer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafkamodule.proxies.KafkaServer(context, mendixObject);
	}

	public static kafkamodule.proxies.KafkaServer load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafkamodule.proxies.KafkaServer.initialize(context, mendixObject);
	}

	public static java.util.List<kafkamodule.proxies.KafkaServer> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<kafkamodule.proxies.KafkaServer> result = new java.util.ArrayList<kafkamodule.proxies.KafkaServer>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//KafkaModule.KafkaServer" + xpathConstraint))
			result.add(kafkamodule.proxies.KafkaServer.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of KafkaServer_KafkaConfig
	 */
	public final kafkamodule.proxies.KafkaConfig getKafkaServer_KafkaConfig() throws com.mendix.core.CoreException
	{
		return getKafkaServer_KafkaConfig(getContext());
	}

	/**
	 * @param context
	 * @return value of KafkaServer_KafkaConfig
	 */
	public final kafkamodule.proxies.KafkaConfig getKafkaServer_KafkaConfig(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.KafkaConfig result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.KafkaServer_KafkaConfig.toString());
		if (identifier != null)
			result = kafkamodule.proxies.KafkaConfig.load(context, identifier);
		return result;
	}

	/**
	 * Set value of KafkaServer_KafkaConfig
	 * @param kafkaserver_kafkaconfig
	 */
	public final void setKafkaServer_KafkaConfig(kafkamodule.proxies.KafkaConfig kafkaserver_kafkaconfig)
	{
		setKafkaServer_KafkaConfig(getContext(), kafkaserver_kafkaconfig);
	}

	/**
	 * Set value of KafkaServer_KafkaConfig
	 * @param context
	 * @param kafkaserver_kafkaconfig
	 */
	public final void setKafkaServer_KafkaConfig(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.KafkaConfig kafkaserver_kafkaconfig)
	{
		if (kafkaserver_kafkaconfig == null)
			getMendixObject().setValue(context, MemberNames.KafkaServer_KafkaConfig.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.KafkaServer_KafkaConfig.toString(), kafkaserver_kafkaconfig.getMendixObject().getId());
	}

	/**
	 * @return value of TrustStore_KeyStore
	 */
	public final kafkamodule.proxies.KeyStore getTrustStore_KeyStore() throws com.mendix.core.CoreException
	{
		return getTrustStore_KeyStore(getContext());
	}

	/**
	 * @param context
	 * @return value of TrustStore_KeyStore
	 */
	public final kafkamodule.proxies.KeyStore getTrustStore_KeyStore(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.KeyStore result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.TrustStore_KeyStore.toString());
		if (identifier != null)
			result = kafkamodule.proxies.KeyStore.load(context, identifier);
		return result;
	}

	/**
	 * Set value of TrustStore_KeyStore
	 * @param truststore_keystore
	 */
	public final void setTrustStore_KeyStore(kafkamodule.proxies.KeyStore truststore_keystore)
	{
		setTrustStore_KeyStore(getContext(), truststore_keystore);
	}

	/**
	 * Set value of TrustStore_KeyStore
	 * @param context
	 * @param truststore_keystore
	 */
	public final void setTrustStore_KeyStore(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.KeyStore truststore_keystore)
	{
		if (truststore_keystore == null)
			getMendixObject().setValue(context, MemberNames.TrustStore_KeyStore.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.TrustStore_KeyStore.toString(), truststore_keystore.getMendixObject().getId());
	}

	/**
	 * @return value of KeyStore_KeyStore
	 */
	public final kafkamodule.proxies.KeyStore getKeyStore_KeyStore() throws com.mendix.core.CoreException
	{
		return getKeyStore_KeyStore(getContext());
	}

	/**
	 * @param context
	 * @return value of KeyStore_KeyStore
	 */
	public final kafkamodule.proxies.KeyStore getKeyStore_KeyStore(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafkamodule.proxies.KeyStore result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.KeyStore_KeyStore.toString());
		if (identifier != null)
			result = kafkamodule.proxies.KeyStore.load(context, identifier);
		return result;
	}

	/**
	 * Set value of KeyStore_KeyStore
	 * @param keystore_keystore
	 */
	public final void setKeyStore_KeyStore(kafkamodule.proxies.KeyStore keystore_keystore)
	{
		setKeyStore_KeyStore(getContext(), keystore_keystore);
	}

	/**
	 * Set value of KeyStore_KeyStore
	 * @param context
	 * @param keystore_keystore
	 */
	public final void setKeyStore_KeyStore(com.mendix.systemwideinterfaces.core.IContext context, kafkamodule.proxies.KeyStore keystore_keystore)
	{
		if (keystore_keystore == null)
			getMendixObject().setValue(context, MemberNames.KeyStore_KeyStore.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.KeyStore_KeyStore.toString(), keystore_keystore.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return kafkaServerMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafkamodule.proxies.KafkaServer that = (kafkamodule.proxies.KafkaServer) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "KafkaModule.KafkaServer";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
