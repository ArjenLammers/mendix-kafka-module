// This file was generated by Mendix Modeler 7.16.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafka.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the Kafka module
	public static void aCr_KafkaConsumer(IContext context, kafka.proxies.Consumer _kafkaConsumer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KafkaConsumer", _kafkaConsumer == null ? null : _kafkaConsumer.getMendixObject());
			Core.execute(context, "Kafka.ACr_KafkaConsumer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCr_KafkaProducer(IContext context, kafka.proxies.Producer _kafkaProducer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KafkaProducer", _kafkaProducer == null ? null : _kafkaProducer.getMendixObject());
			Core.execute(context, "Kafka.ACr_KafkaProducer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCr_KafkaServer(IContext context, kafka.proxies.Server _kafkaServer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KafkaServer", _kafkaServer == null ? null : _kafkaServer.getMendixObject());
			Core.execute(context, "Kafka.ACr_KafkaServer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean afterStartup(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "Kafka.AfterStartup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_Consumer(IContext context, kafka.proxies.Consumer _consumer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Consumer", _consumer == null ? null : _consumer.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Kafka.BCo_Consumer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_KeyStore(IContext context, kafka.proxies.KeyStore _keyStore)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KeyStore", _keyStore == null ? null : _keyStore.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Kafka.BCo_KeyStore", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<kafka.proxies.Partition> dS_GetDetailedPartitions(IContext context, kafka.proxies.Topic _topic, kafka.proxies.Explorer _explorer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Topic", _topic == null ? null : _topic.getMendixObject());
			params.put("Explorer", _explorer == null ? null : _explorer.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Kafka.DS_GetDetailedPartitions", params);
			java.util.List<kafka.proxies.Partition> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<kafka.proxies.Partition>();
				for (IMendixObject obj : objs)
					result.add(kafka.proxies.Partition.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static kafka.proxies.Explorer dS_GetExplorer(IContext context, kafka.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "Kafka.DS_GetExplorer", params);
			return result == null ? null : kafka.proxies.Explorer.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static kafka.proxies.MessageOverview dS_GetNewMessageOverview(IContext context, kafka.proxies.Partition _partition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Partition", _partition == null ? null : _partition.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "Kafka.DS_GetNewMessageOverview", params);
			return result == null ? null : kafka.proxies.MessageOverview.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static kafka.proxies.Publisher dS_GetPublisher(IContext context, kafka.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "Kafka.DS_GetPublisher", params);
			return result == null ? null : kafka.proxies.Publisher.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<kafka.proxies.Consumer> dS_GetSelectableConsumers(IContext context, kafka.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Kafka.DS_GetSelectableConsumers", params);
			java.util.List<kafka.proxies.Consumer> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<kafka.proxies.Consumer>();
				for (IMendixObject obj : objs)
					result.add(kafka.proxies.Consumer.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<kafka.proxies.Producer> dS_GetSelectableProducers(IContext context, kafka.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Kafka.DS_GetSelectableProducers", params);
			java.util.List<kafka.proxies.Producer> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<kafka.proxies.Producer>();
				for (IMendixObject obj : objs)
					result.add(kafka.proxies.Producer.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean example_AfterStartUpConsumersMicroflow(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "Kafka.Example_AfterStartUpConsumersMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void example_OnReceiveMicroflow(IContext context, java.lang.Long _offset, java.lang.String _key, java.lang.String _value, java.lang.String _messageType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Offset", _offset);
			params.put("Key", _key);
			params.put("Value", _value);
			params.put("MessageType", _messageType);
			Core.execute(context, "Kafka.Example_OnReceiveMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CreateNewHeader(IContext context, kafka.proxies.Publisher _publisher)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Publisher", _publisher == null ? null : _publisher.getMendixObject());
			Core.execute(context, "Kafka.IVK_CreateNewHeader", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PublishMessage(IContext context, kafka.proxies.Publisher _publisher)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Publisher", _publisher == null ? null : _publisher.getMendixObject());
			Core.execute(context, "Kafka.IVK_PublishMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RetrieveMessages(IContext context, kafka.proxies.MessageOverview _messageOverview, kafka.proxies.Partition _partition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MessageOverview", _messageOverview == null ? null : _messageOverview.getMendixObject());
			params.put("Partition", _partition == null ? null : _partition.getMendixObject());
			Core.execute(context, "Kafka.IVK_RetrieveMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RetrieveTopics(IContext context, kafka.proxies.Explorer _explorer, kafka.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Explorer", _explorer == null ? null : _explorer.getMendixObject());
			params.put("Server", _server == null ? null : _server.getMendixObject());
			Core.execute(context, "Kafka.IVK_RetrieveTopics", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveKafkaConsumer(IContext context, kafka.proxies.Consumer _kafkaConsumer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KafkaConsumer", _kafkaConsumer == null ? null : _kafkaConsumer.getMendixObject());
			Core.execute(context, "Kafka.IVK_SaveKafkaConsumer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveKafkaProducer(IContext context, kafka.proxies.Producer _kafkaProducer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KafkaProducer", _kafkaProducer == null ? null : _kafkaProducer.getMendixObject());
			Core.execute(context, "Kafka.IVK_SaveKafkaProducer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveKafkaServer(IContext context, kafka.proxies.Server _kafkaServer)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("KafkaServer", _kafkaServer == null ? null : _kafkaServer.getMendixObject());
			Core.execute(context, "Kafka.IVK_SaveKafkaServer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * Stops all active Kafka connections. Use this as (part of) your 'Before shutdown' microflow.
	 */
	public static void shutdown(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "Kafka.Shutdown", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}